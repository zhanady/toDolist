@page "/weather"
@attribute [StreamRendering]

<PageTitle>To-Do List</PageTitle>

<h1>To-Do List</h1>

<p>Gerencie suas tarefas diárias de forma interativa.</p>

<div>
    <input @bind="newTaskDescription" placeholder="Nova tarefa" class="form-control" />
    <select @bind="newTaskPriority" class="form-control">
        <option value="Baixa">Baixa</option>
        <option value="Média">Média</option>
        <option value="Alta">Alta</option>
    </select>
    <button @onclick="AddTask" class="btn btn-primary">Adicionar</button>
</div>

@if (tasks == null || !tasks.Any())
{
    <p><em>Nenhuma tarefa adicionada.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Data</th>
                <th>Tarefa</th>
                <th>Prioridade</th>
                <th>Status</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Date.ToShortDateString()</td>
                    <td>@task.Description</td>
                    <td>@task.Priority</td>
                    <td>@(task.Completed ? "Concluído" : "Pendente")</td>
                    <td>
                        <button @onclick="() => ToggleTaskStatus(task)" class="btn btn-success">@(task.Completed ? "Reabrir" : "Concluir")</button>
                        <button @onclick="() => RemoveTask(task)" class="btn btn-danger">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TaskItem> tasks = new();
    private string newTaskDescription = string.Empty;
    private string newTaskPriority = "Média";

    private void AddTask()
    {
        Console.WriteLine("Botão Adicionar pressionado");
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            tasks.Add(new TaskItem
                {
                    Date = DateOnly.FromDateTime(DateTime.Now),
                    Description = newTaskDescription,
                    Priority = newTaskPriority,
                    Completed = false
                });
            newTaskDescription = string.Empty;
            StateHasChanged(); // Força a atualização da UI
            Console.WriteLine("Tarefa adicionada: " + newTaskDescription);
        }
        else
        {
            Console.WriteLine("Descrição vazia, tarefa não adicionada.");
        }
    }

    private void ToggleTaskStatus(TaskItem task)
    {
        task.Completed = !task.Completed;
        StateHasChanged(); // Atualiza a UI
        Console.WriteLine("Tarefa alterada: " + task.Description + " - Status: " + (task.Completed ? "Concluído" : "Pendente"));
    }

    private void RemoveTask(TaskItem task)
    {
        tasks.Remove(task);
        StateHasChanged(); // Atualiza a UI
        Console.WriteLine("Tarefa removida: " + task.Description);
    }

    private class TaskItem
    {
        public DateOnly Date { get; set; }
        public string? Description { get; set; }
        public string Priority { get; set; } = "Média";
        public bool Completed { get; set; }
    }
}
